#!/usr/bin/env python3

import os
import requests
import subprocess
import time

def get_current_volume():
    result = subprocess.run(
        ["osascript", "-e", "output volume of (get volume settings)"],
        capture_output=True,
        text=True,
        check=True
    )
    return int(result.stdout.strip())

def set_volume(volume):
    subprocess.run(["osascript", "-e", f"set volume output volume {volume}"], check=True)

def get_bitcoin_price():
    response = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd")
    price = response.json()['bitcoin']['usd']
    return price

def play_sound():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    audio_file = os.path.join(script_dir, "yousuffer.mp3")
    os.system(f"afplay {audio_file}")

def get_relative_path(filename):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(script_dir, filename)

def read_current_multiple(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            try:
                return int(f.read().strip())
            except ValueError:
                return 0
    return 0

def write_current_multiple(file_path, value):
    with open(file_path, "w") as f:
        f.write(str(value))

current_multiple_file = get_relative_path("current_multiple.txt")

current_multiple = read_current_multiple(current_multiple_file)

while True:
    price = get_bitcoin_price()
    if price // 1000 > current_multiple:
        current_multiple = price // 1000
        write_current_multiple(current_multiple_file, current_multiple)
        original_volume = get_current_volume()
        set_volume(60)
        play_sound()
        set_volume(original_volume)
    time.sleep(60)
